---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {% raw %}{{ project_name }}{% endraw %}-web
  namespace: default
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {% raw %}{{ project_name }}{% endraw %}
        component: web
        layer: application
      name: {% raw %}{{ project_name }}{% endraw %}-web
    spec:
      containers:
        - name: {% raw %}{{ project_name }}{% endraw %}-web
          env:
            - name: PORT
              value: "8080"
            - name: NODE_ENV
              value: production
            - name: TRACE_AGENT_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
            - configMapRef:
                name: {% raw %}{{ project_name }}{% endraw %}-environment
          image: {% raw %}{{ project_repo }}{% endraw %}:production
          imagePullPolicy: Always
          ports:
            - name: {% raw %}{{ project_name }}{% endraw %}-http
              containerPort: 8080
          resources:
            requests:
              cpu: 300m
              memory: 256Mi
            limits:
              memory: 1Gi
          readinessProbe:
            httpGet:
              port: {% raw %}{{ project_name }}{% endraw %}-http
              path: /health/ping
              httpHeaders:
                - name: X-Forwarded-Proto
                  value: https
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 10"]
        - name: {% raw %}{{ project_name }}{% endraw %}-nginx
          image: artsy/docker-nginx:1.14.2
          ports:
            - name: nginx-http
              containerPort: 80
            - name: nginx-https
              containerPort: 443
          readinessProbe:
            tcpSocket:
              port: nginx-http
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 5
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 5 && /usr/sbin/nginx -s quit"]
          env:
            - name: 'NGINX_DEFAULT_CONF'
              valueFrom:
                configMapKeyRef:
                  name: nginx-config
                  key: default
          volumeMounts:
            - name: nginx-secrets
              mountPath: /etc/nginx/ssl
      volumes:
        - name: nginx-secrets
          secret:
            secretName: nginx-secrets
            defaultMode: 420
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: tier
                  operator: In
                  values:
                    - foreground

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: {% raw %}{{ project_name }}{% endraw %}-web
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {% raw %}{{ project_name }}{% endraw %}-web
  minReplicas: 2
  maxReplicas: 6
  targetCPUUtilizationPercentage: 70

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: {% raw %}{{ project_name }}{% endraw %}
    component: web
    layer: application
  name: {% raw %}{{ project_name }}{% endraw %}-web
  namespace: default
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: {% raw %}{{ artsyNetWildcardSSLCert }}{% endraw %}
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "5"
spec:
  ports:
    - port: 80
      protocol: TCP
      name: http
      targetPort: nginx-http
    - port: 443
      protocol: TCP
      name: https
      targetPort: nginx-https
  selector:
    app: {% raw %}{{ project_name }}{% endraw %}
    layer: application
    component: web
  sessionAffinity: None
  type: LoadBalancer
