---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {% raw %}{{ project_name }}{% endraw %}-web
  namespace: default
  labels:
    app: {% raw %}{{ project_name }}{% endraw %}
    component: web
    layer: application
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app: {% raw %}{{ project_name }}{% endraw %}
      component: web
      layer: application
  template:
    metadata:
      labels:
        app: {% raw %}{{ project_name }}{% endraw %}
        component: web
        layer: application
      name: {% raw %}{{ project_name }}{% endraw %}-web
    spec:
      initContainers:
      - name: setenv
        image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/fortress:staging
        imagePullPolicy: Always
        command:
        - python
        - src/load/load.py
        - kubernetes
        - staging
        - {{ project_name }}
        envFrom:
        - configMapRef:
            name: secrets-config
        volumeMounts:
        - name: secrets
          mountPath: /secrets
      containers:
      - name: {% raw %}{{ project_name }}{% endraw %}-web
        env:
        - name: PORT
          value: '8080'
        envFrom:
        - configMapRef:
            name: secrets-config
        - configMapRef:
            name: {% raw %}{{ project_name }}{% endraw %}-environment
        volumeMounts:
        - name: secrets
          mountPath: /secrets
          readOnly: true
        image: {% raw %}{{ project_repo }}{% endraw %}:staging
        imagePullPolicy: Always
        ports:
        # k8s limits a port name to 15 characters
        - name: {% raw %}{{ project_name }}{% endraw %}-http
          containerPort: 8080
        resources:
          requests:
            cpu: 50m
            memory: 256Mi
          limits:
            memory: 512Mi
        readinessProbe:
          httpGet:
            port: {% raw %}{{ project_name }}{% endraw %}-http
            path: /health/ping
            httpHeaders:
            - name: X-Forwarded-Proto
              value: https
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        lifecycle:
          preStop:
            exec:
              command: ["sh", "-c", "sleep 5"]
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "1"
      serviceAccountName: {{ project_name }}
      tolerations: # if ok to run on Spot instances
      - key: reserved
        operator: Equal
        value: spot
        effect: NoSchedule
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: tier
                operator: In
                values:
                - foreground
                - foreground-spot # if ok to run on Spot instances
          preferredDuringSchedulingIgnoredDuringExecution: # if ok to run on Spot instances
          - weight: 100
            preference:
              matchExpressions:
              - key: tier
                operator: In
                values:
                - foreground-spot
      volumes:
      - name: secrets
        emptyDir: {}

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: {% raw %}{{ project_name }}{% endraw %}-web
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {% raw %}{{ project_name }}{% endraw %}-web
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 70

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: {% raw %}{{ project_name }}{% endraw %}
    component: web
    layer: application
  name: {% raw %}{{ project_name }}{% endraw %}-web-internal
  namespace: default
spec:
  ports:
  - port: 8080
    protocol: TCP
    name: http
    targetPort: {% raw %}{{ project_name }}{% endraw %}-http
  selector:
    app: {% raw %}{{ project_name }}{% endraw %}
    layer: application
    component: web
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {% raw %}{{ project_name }}{% endraw %}
  annotations:
    nginx.ingress.kubernetes.io/whitelist-source-range: "{% raw %}{{ externalIngressAllowSourceIP|join(',') }}{% endraw %}"
spec:
  ingressClassName: nginx
  rules:
  - host: {% raw %}{{ project_name }}{% endraw %}-staging.artsy.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {% raw %}{{ project_name }}{% endraw %}-web-internal
            port:
              name: http

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {% raw %}{{ project_name }}{% endraw %}-cron-example
spec:
  schedule: "11 11 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0 # do not retry if pod fails.
      template:
        metadata:
          annotations:
            "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"
        spec:
          initContainers:
          - name: setenv
            image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/fortress:staging
            imagePullPolicy: Always
            command:
            - python
            - src/load/load.py
            - kubernetes
            - staging
            - {{ project_name }}
            envFrom:
            - configMapRef:
                name: secrets-config
            volumeMounts:
            - name: secrets
              mountPath: /secrets
          containers:
          - name: {% raw %}{{ project_name }}{% endraw %}-cron-example
            image: {% raw %}{{ project_repo }}{% endraw %}:staging
            imagePullPolicy: Always
            envFrom:
            - configMapRef:
                name: secrets-config
            - configMapRef:
                name: {% raw %}{{ project_name }}{% endraw %}-environment
            volumeMounts:
            - name: secrets
              mountPath: /secrets
              readOnly: true
            args: ["echo", "i am just an example"]
          restartPolicy: Never
          serviceAccountName: {{ project_name }}
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: tier
                    operator: In
                    values:
                    - background
          volumes:
          - name: secrets
            emptyDir: {}
